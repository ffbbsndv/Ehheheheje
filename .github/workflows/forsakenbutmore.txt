-- example script by https://github.com/mstudio45/LinoriaLib/blob/main/Example.lua and modified by deivid
-- You can suggest changes with a pull request or something



local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()

local Options = Library.Options
local Toggles = Library.Toggles

Library.ForceCheckbox = false -- Forces AddToggle to AddCheckbox
Library.ShowToggleFrameInKeybinds = true -- Make toggle keybinds work inside the keybinds UI (aka adds a toggle to the UI). Good for mobile users (Default value = true)

local Window = Library:CreateWindow({
	-- Set Center to true if you want the menu to appear in the center
	-- Set AutoShow to true if you want the menu to appear when it is created
	-- Set Resizable to true if you want to have in-game resizable Window
	-- Set MobileButtonsSide to "Left" or "Right" if you want the ui toggle & lock buttons to be on the left or right side of the window
	-- Set ShowCustomCursor to false if you don't want to use the Linoria cursor
	-- NotifySide = Changes the side of the notifications (Left, Right) (Default value = Left)
	-- Position and Size are also valid options here
	-- but you do not need to define them unless you are changing them :)

	Title = "Forest Fire",
	Footer = "V1 Please Join The Discord :  https://discord.gg/W724xdWAuq",
	Icon = 135839551848990,
	NotifySide = "Left",
	ShowCustomCursor = false,
})


-- CALLBACK NOTE:
-- Passing in callback functions via the initial element parameters (i.e. Callback = function(Value)...) works
-- HOWEVER, using Toggles/Options.INDEX:OnChanged(function(Value) ... ) is the RECOMMENDED way to do this.
-- I strongly recommend decoupling UI code from logic code. i.e. Create your UI elements FIRST, and THEN setup :OnChanged functions later.

-- You do not have to set your tabs & groups up this way, just a prefrence.
-- You can find more icons in https://lucide.dev/
local Tabs = {
	-- Creates a new tab titled Main
	Main = Window:AddTab("Main", "user"),
	["UI Settings"] = Window:AddTab("UI Settings", "settings"),
}


--[[
Example of how to add a warning box to a tab; the title AND text support rich text formatting.

local WarningTab = Tabs["UI Settings"]:AddTab("Warning Box", "user")

WarningTab:UpdateWarningBox({
	Visible = true,
	Title = "Warning",
	Text = "This is a warning box!",
})

]]

-- Groupbox and Tabbox inherit the same functions
-- except Tabboxes you have to call the functions on a tab (Tabbox:AddTab(name))
local Chrs = Tabs.Main:AddLeftGroupbox("Get")
local Ability6 = Tabs.Main:AddRightGroupbox("Abilitys")
local Moneys = Tabs.Main:AddLeftGroupbox("Money")

function SetMoney()
    local MoneySet = tonumber(_G.MoneyGive)

    local MoneyGive = 0
    local PathForAlreadyExistingMoney = game:GetService("Players").LocalPlayer.PlayerData.Stats.Money
    local Money = PathForAlreadyExistingMoney.Value
    
    if MoneySet > Money then
        MoneyGive = -(MoneySet - Money)
    elseif MoneySet < Money then
        MoneyGive = (Money - MoneySet)
    else
        return
    end
    
    local i = game:GetService("ReplicatedStorage"):WaitForChild("Resources"):WaitForChild("Assets"):WaitForChild("Survivors"):WaitForChild("_89w9")
    
    local try = require(i.Config)
    local Old = try.Exclusive
    try.Exclusive = nil
    try.Price = MoneyGive
    
    local args = {
        "PurchaseContent",
        {
            i,
            try
        }
    }
    game:GetService("ReplicatedStorage"):WaitForChild("Modules"):WaitForChild("Network"):WaitForChild("RemoteFunction"):InvokeServer(unpack(args))
    
    task.spawn(function()
        task.wait(0.1)
        try.Exclusive = Old
    end)
end

function GetAllChrs()
    for _, i in pairs(game:GetService("ReplicatedStorage").Resources.Assets.Survivors:GetChildren()) do
        local try = require(i.Config)

        try.Exclusive = nil

        local Old = try.Exclusive
        try.Price = 0
        
        local args = {
            "PurchaseContent",
            {
                i,
                try
            }
        }
        game:GetService("ReplicatedStorage"):WaitForChild("Modules"):WaitForChild("Network"):WaitForChild("RemoteFunction"):InvokeServer(unpack(args))
        task.spawn(function()
            task.wait(0.1)
            try.Exclusive = Old
        end)
    end

    for _, i in pairs(game:GetService("ReplicatedStorage").Resources.Assets.Killers:GetChildren()) do
        local try = require(i.Config)

        try.Exclusive = nil

        local Old = try.Exclusive
        try.Price = 0
        
        
        local args = {
            "PurchaseContent",
            {
                i,
                try
            }
        }
        game:GetService("ReplicatedStorage"):WaitForChild("Modules"):WaitForChild("Network"):WaitForChild("RemoteFunction"):InvokeServer(unpack(args))
        task.spawn(function()
            task.wait(0.1)
            try.Exclusive = Old
        end)
    end
end

function GetAllSkins()
    for _, v in pairs(game:GetService("ReplicatedStorage").Resources.Assets.Skins.Survivors:GetChildren()) do
        for _, i in pairs(v:GetChildren()) do
            local try = require(i.Config)
            local Old = try.Exclusive
            try.Exclusive = nil
            try.Price = 0
            
            
            local args = {
                "PurchaseContent",
                {
                    i,
                    try
                }
            }
            game:GetService("ReplicatedStorage"):WaitForChild("Modules"):WaitForChild("Network"):WaitForChild("RemoteFunction"):InvokeServer(unpack(args))
            task.spawn(function()
                task.wait(0.1)
                try.Exclusive = Old
            end)
        end
    end

    for _, v in pairs(game:GetService("ReplicatedStorage").Resources.Assets.Skins.Killers:GetChildren()) do
        for _, i in pairs(v:GetChildren()) do
            pcall(function()
                local try = require(i.Config)
                local Old = try.Exclusive
                try.Exclusive = nil
                try.Price = 0
                
                local args = {
                    "PurchaseContent",
                    {
                        i,
                        try
                    }
                }
                game:GetService("ReplicatedStorage"):WaitForChild("Modules"):WaitForChild("Network"):WaitForChild("RemoteFunction"):InvokeServer(unpack(args))
                task.spawn(function()
                    task.wait(0.1)
                    try.Exclusive = Old
                end)
            end)
        end
    end
end

function GetAllEmotes()
    for _, i in pairs(game:GetService("ReplicatedStorage").Resources.Assets.Emotes:GetChildren()) do
        local try = require(i)
        local Old = try.Exclusive
        try.Exclusive = nil
        try.Price = 0
        
        local args = {
            "PurchaseContent",
            {
                i,
                try
            }
        }
        game:GetService("ReplicatedStorage"):WaitForChild("Modules"):WaitForChild("Network"):WaitForChild("RemoteFunction"):InvokeServer(unpack(args))
        task.spawn(function()
            task.wait(0.1)
            try.Exclusive = Old
        end)
    end
end

local MyButton = Chrs:AddButton({
	Text = "Get All Characters",
	Func = function()
		GetAllChrs()
	end,
	DoubleClick = false,

	Tooltip = "Gets All Characters",
	DisabledTooltip = "I am disabled!",

	Disabled = false, -- Will disable the button (true / false)
	Visible = true, -- Will make the button invisible (true / false)
	Risky = false, -- Makes the text red (the color can be changed using Library.Scheme.Red) (Default value = false)
})

local MyButton = Chrs:AddButton({
	Text = "Get All Skins",
	Func = function()
		GetAllSkins()
	end,
	DoubleClick = false,

	Tooltip = "Gets All Skins",
	DisabledTooltip = "I am disabled!",

	Disabled = false, -- Will disable the button (true / false)
	Visible = true, -- Will make the button invisible (true / false)
	Risky = false, -- Makes the text red (the color can be changed using Library.Scheme.Red) (Default value = false)
})


local MyButton = Chrs:AddButton({
	Text = "Get All Emotes",
	Func = function()
		GetAllEmotes()
	end,
	DoubleClick = false,

	Tooltip = "Gets All Emotes",
	DisabledTooltip = "I am disabled!",

	Disabled = false, -- Will disable the button (true / false)
	Visible = true, -- Will make the button invisible (true / false)
	Risky = false, -- Makes the text red (the color can be changed using Library.Scheme.Red) (Default value = false)
})

Ability6:AddDropdown("Players", {
	Values = {},
    SpecialType = "Player",
	Default = 0, -- number index of the value / string
	Multi = false, -- true / false, allows multiple choices to be selected

	Text = "Players!",
	Tooltip = "Select A Player", -- Information shown when you hover over the dropdown
	DisabledTooltip = "I am disabled!", -- Information shown when you hover over the dropdown while it's disabled

	Searchable = true, -- true / false, makes the dropdown searchable (great for a long list of values)

	Callback = function(Value)
		_G.PlayerSelc = Value
	end,

	Disabled = false, -- Will disable the dropdown (true / false)
	Visible = true, -- Will make the dropdown invisible (true / false)
})

Ability6:AddLabel("Spam Clockwork Tea Ability"):AddKeyPicker("Toggle", {
    Default = "H",         -- default mouse button 2
    Mode = "Toggle",         -- press to toggle on/off
    SyncToggleState = true,  -- sync with the “AutoLockToggle” above
    Text = "Spam Clockwork Tea Ability",
    Callback = function(Value)
        getgenv().Spam = Value

        local Plr = game.Players[_G.PlayerSelc]
        local Name = Plr.Name

        while getgenv().Spam do
            local args = {
                "REMOTE_EVENT",
                Name.."TeaFire",
                {
                    0.5,
                    false
                }
            }
            game:GetService("ReplicatedStorage"):WaitForChild("Modules"):WaitForChild("Network"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
            task.wait(1)
            local args = {
                "REMOTE_EVENT",
                Name.."TeaFire",
                {
                    1,
                    false
                }
            }
            game:GetService("ReplicatedStorage"):WaitForChild("Modules"):WaitForChild("Network"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
                
            task.wait(0.1)
        end
    end,
})

Ability6:AddLabel("Spam Ability's How It Works! \n\n The Person Whos Selected Has To Have Used Clockwork Tea Ability \n And Could Of Done it for 1, less or more seconds!", true)

Moneys:AddInput("MyTextbox", {
	Default = "0",
	Numeric = false, -- true / false, only allows numbers
	Finished = false, -- true / false, only calls callback when you press enter
	ClearTextOnFocus = true, -- true / false, if false the text will not clear when textbox focused

	Text = "Input Money",
	Tooltip = "Input Money To Give To Youreself !", -- Information shown when you hover over the textbox

	Placeholder = "0", -- placeholder text when the box is empty
	-- MaxLength is also an option which is the max length of the text

	Callback = function(Value)
		_G.MoneyGive = Value
	end,
})

local MyButton = Moneys:AddButton({
	Text = "Set Money",
	Func = function()
		SetMoney()
	end,
	DoubleClick = false,

	Tooltip = "Sets The Current Money Of Your'eself to The Input Value",
	DisabledTooltip = "I am disabled!",

	Disabled = false, -- Will disable the button (true / false)
	Visible = true, -- Will make the button invisible (true / false)
	Risky = false, -- Makes the text red (the color can be changed using Library.Scheme.Red) (Default value = false)
})

-- UI Settings
local MenuGroup = Tabs["UI Settings"]:AddLeftGroupbox("Menu")

Library.KeybindFrame.Visible = true

MenuGroup:AddToggle("KeybindMenuOpen", {
	Default = Library.KeybindFrame.Visible,
	Text = "Open Keybind Menu",
	Callback = function(value)
		Library.KeybindFrame.Visible = value
	end,
})

MenuGroup:AddToggle("ShowCustomCursor", {
	Text = "Custom Cursor",
	Default = true,
	Callback = function(Value)
		Library.ShowCustomCursor = Value
	end,
})
MenuGroup:AddDropdown("NotificationSide", {
	Values = { "Left", "Right" },
	Default = "Right",

	Text = "Notification Side",

	Callback = function(Value)
		Library:SetNotifySide(Value)
	end,
})
MenuGroup:AddDropdown("DPIDropdown", {
	Values = { "50%", "75%", "100%", "125%", "150%", "175%", "200%" },
	Default = "100%",

	Text = "DPI Scale",

	Callback = function(Value)
		Value = Value:gsub("%%", "")
		local DPI = tonumber(Value)

		Library:SetDPIScale(DPI)
	end,
})
MenuGroup:AddDivider()
MenuGroup:AddLabel("Menu bind"):AddKeyPicker("MenuKeybind", { Default = "RightShift", NoUI = true, Text = "Menu keybind" })

MenuGroup:AddButton("Unload", function()
    E:Disconnect()
	Library:Unload()
end)

Library.ToggleKeybind = Options.MenuKeybind -- Allows you to have a custom keybind for the menu

-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- ThemeManager (Allows you to have a menu theme system)

-- Hand the library over to our managers
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- Adds our MenuKeybind to the ignore list
-- (do you want each config to have a different menu key? probably not.)
SaveManager:SetIgnoreIndexes({ "MenuKeybind" })

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
ThemeManager:SetFolder("ForestFire")
SaveManager:SetFolder("ForestFire/ForsakenButMore")
SaveManager:SetSubFolder("ForsakenButMore") -- if the game has multiple places inside of it (for example: DOORS)
-- you can use this to save configs for those places separately
-- The path in this script would be: MyScriptHub/specific-game/settings/specific-place
-- [ This is optional ]

-- Builds our config menu on the right side of our tab
SaveManager:BuildConfigSection(Tabs["UI Settings"])

-- Builds our theme menu (with plenty of built in themes) on the left side
-- NOTE: you can also call ThemeManager:ApplyToGroupbox to add it to a specific groupbox
ThemeManager:ApplyToTab(Tabs["UI Settings"])

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
